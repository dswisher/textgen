<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yaclops</name>
    </assembly>
    <members>
        <member name="T:Yaclops.Attributes.CommandAliasAttribute">
            <summary>
            Decorate a command with an alias
            </summary>
        </member>
        <member name="M:Yaclops.Attributes.CommandAliasAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="alias">The alias to add</param>
        </member>
        <member name="T:Yaclops.Attributes.LongNameAttribute">
            <summary>
            Decorate a class or property with a long name
            </summary>
        </member>
        <member name="M:Yaclops.Attributes.LongNameAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The long name</param>
        </member>
        <member name="T:Yaclops.Attributes.NamedParameterAttribute">
            <summary>
            Mark a property as a named command-line parameter.
            </summary>
        </member>
        <member name="P:Yaclops.Attributes.NamedParameterAttribute.ShortName">
            <summary>
            The short name for the parameter.
            </summary>
        </member>
        <member name="P:Yaclops.Attributes.NamedParameterAttribute.LongName">
            <summary>
            The long name for the parameter. The default is the decamel of the property name.
            </summary>
        </member>
        <member name="T:Yaclops.Attributes.PositionalParameterAttribute">
            <summary>
            Mark a property as a positional command-line parameter
            </summary>
        </member>
        <member name="T:Yaclops.CommandLineParser">
            <summary>
            Parse a command line
            </summary>
            <remarks>
            Once this is fully functional, drop the old one, make this one public and drop the Ex suffix
            </remarks>
        </member>
        <member name="M:Yaclops.CommandLineParser.#ctor(System.Collections.Generic.IEnumerable{Yaclops.ISubCommand})">
            <summary>
            Constructor
            </summary>
            <param name="commands">List of command objects to reflect</param>
        </member>
        <member name="M:Yaclops.CommandLineParser.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            Commands can be added using the AddCommand method.
            </remarks>
        </member>
        <member name="M:Yaclops.CommandLineParser.Parse(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parse the given command line.
            </summary>
            <param name="raw">The raw list of arguments passed into the program.</param>
            <returns>The parsed command</returns>
        </member>
        <member name="M:Yaclops.CommandLineParser.AddCommand(Yaclops.ISubCommand)">
            <summary>
            Add a command to the list of commands.
            </summary>
            <remarks>
            This must be called before the first call to Parse().
            </remarks>
            <param name="command">The command to add.</param>
        </member>
        <member name="T:Yaclops.CommandLineParserException">
            <summary>
            An error occurred during command line parsing.
            </summary>
        </member>
        <member name="M:Yaclops.CommandLineParserException.#ctor(System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Yaclops.Help.HelpCommand">
            <summary>
            Internal help command.
            </summary>
        </member>
        <member name="T:Yaclops.ISubCommand">
            <summary>
            The interface that a subcommand must implement.
            </summary>
        </member>
        <member name="M:Yaclops.ISubCommand.Execute">
            <summary>
            Execute the command.
            </summary>
        </member>
        <member name="T:Yaclops.Help.IConsole">
            <summary>
            Interface for the bits of the console we use, so we can mock it easily in unit tests
            </summary>
        </member>
        <member name="T:Yaclops.Help.WrappedConsole">
            <summary>
            IConsole implementation that writes to the console
            </summary>
        </member>
        <member name="T:Yaclops.Parsing.States.GlobalState">
            <summary>
            Looking for the next token, haven't found a command, yet
            </summary>
        </member>
        <member name="T:Yaclops.Parsing.States.FailureState">
            <summary>
            Something went wrong.
            </summary>
        </member>
        <member name="T:Yaclops.Parsing.States.InitialState">
            <summary>
            The initial state of the parser.
            </summary>
        </member>
        <member name="T:Yaclops.Parsing.States.SuccessState">
            <summary>
            Successful parse!
            </summary>
        </member>
        <member name="T:Yaclops.Parsing.ParserConfigurationException">
            <summary>
            An error occured during command-line parsing.
            </summary>
        </member>
        <member name="M:Yaclops.Parsing.ParserConfigurationException.#ctor(System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Yaclops.Parsing.ParseResult.GlobalValues">
            <summary>
            The list of parsed parameters that are global - not associated with a specific command
            </summary>
        </member>
        <member name="P:Yaclops.Parsing.ParseResult.CommandValues">
            <summary>
            The list of parameters that are tied to the command
            </summary>
        </member>
        <member name="P:Yaclops.Parsing.ParseResult.CommandListValues">
            <summary>
            The list of list (collection) parameters that are tied to the command
            </summary>
        </member>
        <member name="T:Yaclops.Attributes.SummaryAttribute">
            <summary>
            Used to decorate a subcommand with a summary.
            </summary>
        </member>
        <member name="M:Yaclops.Attributes.SummaryAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="summary">The summary of the command.</param>
        </member>
        <member name="P:Yaclops.Attributes.SummaryAttribute.Summary">
            <summary>
            The summary.
            </summary>
        </member>
        <member name="T:Yaclops.Reflecting.CommandPusher">
            <summary>
            Push parse results onto an ISubCommand instance.
            </summary>
            <remarks>
            This is the bridge between ParseResult and an ISubCommand instance. It populates
            the properties of an ISubCommand based on the results of the parse.
            </remarks>
        </member>
        <member name="T:Yaclops.Reflecting.CommandScanner">
            <summary>
            Scan ISubCommand instance and add its info tot he parser configuration.
            </summary>
            <remarks>
            This is the bridge between the attributes decorating an ISubCommand instance and
            the ParserConfiguration.
            </remarks>
        </member>
    </members>
</doc>
